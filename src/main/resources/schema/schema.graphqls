type Query {
    game(id: String!): Game
    horse(id: Long!): Horse
}

scalar Long

type Game {
    id: String
    status: String
    version: Long
    races: [Race],
    newBettingSystem: Boolean
    type: String,
}

type Race {
    id: String
    name: String
    date: String
    number: Long
    distance: Long
    startMethod: String
    startTime: String
    scheduledStartTime: String
    prize: String
    terms: [String]
    sport: String
    track: Track
    status: String
    # pools: Pools
    starts: [Start]
    # mergedPools: [MergedPool],
}

type Track {
    id: Long
    name: String
    condition: String
    countryCode: String
}

type Start {
    id: String,
    number: Long
    postPosition: Long
    distance: Long
    horse: RaceHorse
    driver: Driver
    scratched: Boolean
}

type RaceHorse {
    id: Long,
    name: String
    nationality: String
    age: Long
    sex: String
    record: Record
    trainer: Trainer
    shoes: Shoes
    sulky: Sulky
    money: Long
    color: String
    owner: Owner
    breeder: Breeder
    # statistics: Statistics2
    #    pedigree: Pedigree
    foreignOwned: Boolean
    homeTrack: HomeTrack
    results: [Result]
    father: Horse
    mother: Horse
}

type Record {
    code: String
    startMethod: String
    distance: String
    time: RecordTime
}

type RecordTime {
    minutes: Long
    seconds: Long
    tenths: Long
}

type Trainer {
    id: Long,
    firstName: String
    lastName: String
    shortName: String
    location: String
    birth: Long
    license: String
    silks: String
    homeTrack: HomeTrack
    #    statistics: Statistics
}

type Shoes {
    reported: Boolean,
    front: ShoesFrontBack,
    back: ShoesFrontBack,
}

type ShoesFrontBack {
    hasShoe: Boolean
    changed: Boolean
}

type Sulky {
    reported: Boolean
    type: SulkyType
    colour: SulkyColour
}

type SulkyType {
    code: String
    text: String
    engText: String
    changed: Boolean
}

type SulkyColour {
    code: String
    text: String
    engText: String
    changed: Boolean
}

type Owner {
    id: Long
    name: String
    location: String
}

type Breeder {
    id: Long
    name: String
    location: String
}

type HomeTrack {
    id: Long
    name: String
}

type Driver {
    id: Long
    firstName: String
    lastName: String
    shortName: String
    location: String
    birth: Long
    license: String
    silks: String
    homeTrack: HomeTrack,
    # statistics: Statistics3?,
}

type Result {
    date: String
    place: String
}

#type Pedigree {
#    father: AnotherHorse
#    mother: AnotherHorse
#}

type Horse {
    id: Long
    name: String
    father: Horse
    mother: Horse
    siblings: [Horse]
}
